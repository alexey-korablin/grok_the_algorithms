#
# ********************
# СОРТИРОВКА ВЫБОРОМ |
# ********************
#
# Массивы и связанные списки
#
# Все элементы массива хранятся в памяти непрерывно.
# При добавлении элемента в массив требуется свободная ячейка памяти и если ее нет, то производится поиск свободного
# блока памяти подходяещго размера. В этом случае операция добавления элемента в массив будет выполняться медленно.
# Можно зарезервировать область памяти создав пустой массив необходимой длинны, но
#   - в случае если массиву не потребуются все зарезервированные ячейки память будет расходоваться не эффективно
#   - есди список превысит зарезервированную длину, перемещать все равно придется
# Массивы отлично подходят для обращения к произвольным элементам, так как адреса памяти известны заранее
#
# В связанном списке элементы могут хранитсья где угодно в памяти.
# Каждый элемент хранит адрес следующего элемента списка - это механизм объединенеия в цепочку.
# При добавлении нового элемента запись производится в свободную ячейку, а в предидущий элемент записывается адрес
# последнего добавленного элемента.
# Связанные списки хороши для последовательной обработки, так как поиск любого элемента связанного списка начинается с
# первого элемента. Если же нужно обращаться к произвольным элементам то связанный список - ОЧЕНЬ плохое решение
#
# Позиция элемента называется индексом
#
# Время выполненеия операций
#
# Операция | Массивы | Списки |
# ----------------------------|
# чтение   | O(1)    | O(n)   |
# ----------------------------|
# вставка  | O(n)    | O(1)   |
# ----------------------------|
# удаление | O(n)    | O(1)   |
# ----------------------------|
#
# при вставке элемента в список нужно только изменить указатель предидцущего элемента на вновь вставленный. При вставке
# в массив придется изменить адреса ячеек памяти всех элементов после вставленного.
# Удаление работает схожим образом и также связанный список подходит больше.
#
# Может быть также использован массив связанных списков
# массив
# -----      --------------   -------------   --------------
# | a | ---> | Алексей |*-|-->| Андрей |*-|-->| Арсений |*-|-->... связанный список на букву "А"
# -----      --------------   -------------   --------------
# -----      ------------   -------------   ----------------
# | б | ---> | Борис |*-|-->| Богдан |*-|-->| Бронислав |*-|-->... связанный список на букву "Б"
# -----      ------------   -------------   ----------------
# -----      --------------   -------------   ---------------
# | в | ---> | Валерий |*-|-->| Виктор |*-|-->| Владимир |*-|-->... связанный список на букву "В"
# -----      --------------   -------------   ---------------
# *массив должен быть отсортирован, а связанный список - не обязательно.
#
# Сортировка выбором (медленная)
# .


def find_smallest(arr):
    init_index = 0
    smallest_index = None
    for a in range(1, len(arr)):
        if not smallest_index:
            smallest_index = a if arr[a] < arr[init_index] else init_index
        elif arr[a] < smallest_index:
            smallest_index = a
    return smallest_index


def selection_sort(arr):
    sorted_list = []
    for el in range(len(arr) - 1):
        index = find_smallest(arr)
        sorted_list.append(arr[index])
        del arr[index]
    return sorted_list


print(selection_sort([1, 4, 5, 5, 1, 3]))  # [1, 1, 3, 4, 5]

