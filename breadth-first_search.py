# BSF (Breadth-First search) - поиск в ширину - позволяет найти кратчайшее расстояние между двумя объектами. Задачи
# такого типа называются "Задачами нахождения кратчайшего пути"
# Графы состоят из узлов и ребер
# --------           -------
# | Alex | --------> | Tom |
# --------           -------
# -----
# | x | - узел
# -----
# --------> - ребро
# Один узел может быть напрямую соединен  с несколькими другими узлами. Такие узлы называются "соседями".
# Графы моделируют связи между объектами
# Алгоритм поиска в ширину отвечает на 2 вопроса: существует ли путь от узла "А" к узлу "Б" и какой кратчайший путь
# между двумя этими узлами
# Связи между узлами могут быть разделены на уровни. Все узлы соединенные ребрами с исходным узлом непосредственно
# являются связями 1-го уровня, а узлы доступные через один узел являются узлами второго уровня и т.д. связи 1-го уровня
# проверяются раньше связей 2-го уровня. Связи проверяются всегда в порядке их добавления. Для такой проверки существует
# специальная структура данных - очередь
# Очередь похожа на стек. Для нее доступны лишь две операции постановка в очередь и удаление из очереди. Обращение к
# произвольным элементам невозможно. Очередь работает по FIFO, в то время как стек - по LIFO

graph = dict()
graph['me'] = ['alice', 'bob', 'claire']
graph['bob'] = ['anuj', 'peggy']
graph['alice'] = ['peggy']
graph['claire'] = ['thom', 'jonny']
graph['anuj'] = []
graph['peggy'] = []
graph['thom'] = []
graph['jonny'] = []

# Направленный - граф в котором ребро ведет от одного узла к другому только в одном направлении
# Ненаправленный - граф в котором узлы связаны друг с другом в двух направлениях
# В Python двусторонняя очередь (дека) создается функцией deque

from collections import deque


def is_person_seller(name):
    '''
    Checks if the person is a mango seller

    If the passed name is ended with "m" letter, then the person is a mango seller.
    Simple rule and silly enough. Just fun!
    '''
    return name[-1] == 'm'


def search(name):
    search_queue = deque()
    search_queue += graph[name]
    searched = []
    while search_queue:
        print('search queue is ->', search_queue)
        person = search_queue.popleft()
        if person not in searched:
            if is_person_seller(person):
                print(person + ' is a mango seller!')
                return True
            else:
                search_queue += graph[person]
                searched.append(person)
                print(person, 'has added')
    return False


search('me')

# Время выполненеия.
# Время выполненеия может быть оценено как O(количество_ребер). Также производится операция добавления проверенных
# элементов в список и это время может быть записано как O(количество_узлов). А общий поиск будет рассчитываться по
# формуле O(количество_узлов + количество_ребер) или O(V + E), где V - количество узлов, а E - количество ребер
#
# Граф в котором все ребра направлены только в одном направлении от корневого узла называется деревом
