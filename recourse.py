# **********
# РЕКУРСИЯ |
# **********
#
# Каждая рекурсивная функция содержит в себе код обработки двух случаев: базового и рекурсивного. В рекурсивном случае
# функция вызывает саму себя. В базовом этого не происходит


def countdown(i):
    print(i)
    if i < 1:
        return
    else:
        i -= 1
        countdown(i)


countdown(4)

# СТЕК
#
# Стек поддерживает только две операции добавление и удаление функции. Все операции выполняются только с вершиной стека.
# При вызове функция попадает в стек. Под нее выделяется область памяти куда записыватся все переменные связанные с
# текущим вызовом. По завершении текущей функции она удаляется из стека, а область памяти очищается.
# При рекупсивном вызове функция из которой был произведен вызов остается в частично завершенном состоянии.

a = 5


def factorial(n):
    if n == 1:
        return n
    else:
        return n * factorial(n - 1)


print('factorial of', a, 'is', factorial(a))

# Существенный недостаток рекурсии в хранении всех неоконченных вызовов в стеке. В некоторых тяжелых случаях следует
# переписать код на использование циклов
